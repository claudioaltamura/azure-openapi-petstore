/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.8.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package de.claudioaltamura.azure.openapi.petstore.api;

import de.claudioaltamura.azure.openapi.petstore.model.Error;
import de.claudioaltamura.azure.openapi.petstore.model.NewPet;
import de.claudioaltamura.azure.openapi.petstore.model.Pet;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-09-17T16:31:34.688803+02:00[Europe/Berlin]", comments = "Generator version: 7.8.0")
@Validated
@Tag(name = "Default", description = "the Default API")
@RequestMapping("${openapi.openAPIPetstoreExample.base-path:/v2}")
public interface DefaultApi {

    /**
     * POST /pets
     * Creates a new pet in the store. Duplicates are allowed
     *
     * @param newPet Pet to add to the store (required)
     * @return pet response (status code 200)
     *         or unexpected error (status code 200)
     */
    @Operation(
        operationId = "addPet",
        description = "Creates a new pet in the store. Duplicates are allowed",
        responses = {
            @ApiResponse(responseCode = "200", description = "pet response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Pet.class))
            }),
            @ApiResponse(responseCode = "default", description = "unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/pets",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Pet> addPet(
        @Parameter(name = "NewPet", description = "Pet to add to the store", required = true) @Valid @RequestBody NewPet newPet
    );


    /**
     * DELETE /pets/{id}
     * deletes a single pet based on the ID supplied
     *
     * @param id ID of pet to delete (required)
     * @return pet deleted (status code 204)
     *         or unexpected error (status code 200)
     */
    @Operation(
        operationId = "deletePet",
        description = "deletes a single pet based on the ID supplied",
        responses = {
            @ApiResponse(responseCode = "204", description = "pet deleted"),
            @ApiResponse(responseCode = "default", description = "unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/pets/{id}",
        produces = { "application/json" }
    )
    
    ResponseEntity<Void> deletePet(
        @Parameter(name = "id", description = "ID of pet to delete", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    );


    /**
     * GET /pets/{id}
     * Returns a user based on a single ID, if the user does not have access to the pet
     *
     * @param id ID of pet to fetch (required)
     * @return pet response (status code 200)
     *         or unexpected error (status code 200)
     */
    @Operation(
        operationId = "findPetById",
        description = "Returns a user based on a single ID, if the user does not have access to the pet",
        responses = {
            @ApiResponse(responseCode = "200", description = "pet response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Pet.class))
            }),
            @ApiResponse(responseCode = "default", description = "unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/pets/{id}",
        produces = { "application/json" }
    )
    
    ResponseEntity<Pet> findPetById(
        @Parameter(name = "id", description = "ID of pet to fetch", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    );


    /**
     * GET /pets
     * Returns all pets from the system that the user has access to.
     *
     * @param tags tags to filter by (optional)
     * @param limit maximum number of results to return (optional)
     * @return pet response (status code 200)
     *         or unexpected error (status code 200)
     */
    @Operation(
        operationId = "findPets",
        description = "Returns all pets from the system that the user has access to.",
        responses = {
            @ApiResponse(responseCode = "200", description = "pet response", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Pet.class)))
            }),
            @ApiResponse(responseCode = "default", description = "unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/pets",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<Pet>> findPets(
        @Parameter(name = "tags", description = "tags to filter by", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tags", required = false) List<String> tags,
        @Parameter(name = "limit", description = "maximum number of results to return", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit
    );

}
